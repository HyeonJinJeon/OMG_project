# 워크플로의 이름 지정
name: CI/CD

# 워크플로가 시작될 조건 지정
on:
  push:
    branches: [hyeju-cicd]

jobs:
  build:
    runs-on: ubuntu-latest  # 실행 환경 지정
    # 실행 스텝 지정
    steps:
      # 깃허브에서 제공하는 checkout 엑션 사용
      - uses: actions/checkout@v4

      # JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # GitHub Secret에서 환경 변수 값 가져오기
      - name: Set environment variables from secrets
        run: |
          echo "${{ secrets.HYEJU_ENV_SECRET }}" > secrets.json
          export $(jq -r 'to_entries | .[] | "\(.key)=\(.value)"' secrets.json) >> $GITHUB_ENV

      # 환경 변수 사용
      - name: Use environment variables
        run: |
          echo "OMG_PUBLIC_IP is $OMG_PUBLIC_IP"
          echo "OMG_DATASOURCE_URL is $OMG_DATASOURCE_URL"
          echo "OMG_DATASOURCE_USERNAME is $OMG_DATASOURCE_USERNAME"
          echo "OMG_DATASOURCE_PASSWORD is $OMG_DATASOURCE_PASSWORD"
          echo "KAKAO_CLIENT_ID is $KAKAO_CLIENT_ID"
          echo "KAKAO_CLIENT_SECRET is $KAKAO_CLIENT_SECRET"
          echo "NAVER_CLIENT_ID is $NAVER_CLIENT_ID"
          echo "NAVER_CLIENT_SECRET is $NAVER_CLIENT_SECRET"
          echo "GOOGLE_CLIENT_ID is $GOOGLE_CLIENT_ID"
          echo "GOOGLE_CLIENT_SECRET is $GOOGLE_CLIENT_SECRET"
          echo "MAIL_USERNAME is $MAIL_USERNAME"
          echo "MAIL_PASSWORD is $MAIL_PASSWORD"
          echo "REDIS_PORT is $REDIS_PORT"
          echo "REDIS_PASSWORD is $REDIS_PASSWORD"
          echo "JWT_SECRET is $JWT_SECRET"
          echo "REFRESH is $REFRESH"
          echo "S3_ACCESS is $S3_ACCESS"
          echo "S3_SECRET is $S3_SECRET"
          echo "WEATHER_API_SECRET is $WEATHER_API_SECRET"
          echo "TOUR_API_SECRET is $TOUR_API_SECRET"
          echo "CHANNEL_API_SECRET is $CHANNEL_API_SECRET"
          echo "OMG_ADMIN_USERNAME is $OMG_ADMIN_USERNAME"
          echo "OMG_ADMIN_PASSWORD is $OMG_ADMIN_PASSWORD"

      # gradle wrapper 파일에 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build

      - name: List build directory
        run: ls -la build/libs

      # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: OMG_project-0.0.1-SNAPSHOT
          path: build/libs/OMG_project-0.0.1-SNAPSHOT.jar

  # 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest # 실행될 인스턴스 OS와 버전

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: OMG_project-0.0.1-SNAPSHOT
          path: build/libs

      - name: List downloaded files
        run: ls -la build/libs

      - name: Save SSH key to file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HYEJU_EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy JAR file to EC2
        run: scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no build/libs/OMG_project-0.0.1-SNAPSHOT.jar ${{ secrets.HYEJU_EC2_USER }}@${{ secrets.HYEJU_EC2_HOST }}:/home/ec2-user/app/OMG_project/

      - name: Deploy JAR to EC2
        uses: appleboy/ssh-action@v0.1.9 # ssh 접속하는 오픈소스
        with:
          host: ${{ secrets.HYEJU_EC2_HOST }} # EC2 인스턴스 IP
          username: ${{ secrets.HYEJU_EC2_USER }} # 아마존 리눅스 아이디 (보통 ec2-user)
          key: ${{ secrets.HYEJU_EC2_SSH_KEY }} # EC2 인스턴스 pem key
          port: ${{ secrets.HYEJU_EC2_SSH_PORT }} # 접속포트번호 (보통 22)
          script: | # 실행될 스크립트
            cd /home/ec2-user/app/OMG_project
            nohup java -jar OMG_project-0.0.1-SNAPSHOT.jar &
