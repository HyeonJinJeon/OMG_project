spring:
  application:
    name: OMG_project
  datasource:
   url: ${OMG_DATASOURCE_URL}
     username: ${OMG_DATASOURCE_USERNAME}
     password: ${OMG_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true

  security:
    user:
      name: user
      password: 1234
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: http://${OMG_PUBLIC_IP}:8080/login/oauth2/code/kakao
            client-name: Kakao
            client-authentication-method: client_secret_post
            scope:
              - account_email
              - profile_nickname

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://${OMG_PUBLIC_IP}:8080/login/oauth2/code/naver
            client-name: Naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email

          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: google
            authorization-grant-type: authorization_code
            redirect-uri: http://${OMG_PUBLIC_IP}:8080/login/oauth2/code/google
            scope:
              - profile
              - email

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          starttls:
            enable: true
          auth: true

  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true

  kafka:
    consumer:
      bootstrap-servers: ${OMG_PUBLIC_IP}:9092 # Kafka 서버 주소 설정
      group-id: chat-room-listener # Kafka 소비자 그룹 ID 설정
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 키 디시리얼라이저 설정
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 값 디시리얼라이저 설정
    producer:
      bootstrap-servers: ${OMG_PUBLIC_IP}:9092 # Kafka 서버 주소 설정
      key-serializer: org.apache.kafka.common.serialization.StringSerializer # 키 시리얼라이저 설정
      value-serializer: org.apache.kafka.common.serialization.StringSerializer # 값 시리얼라이저 설정

  data:
    redis:
      host: ${OMG_PUBLIC_IP}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

server:
  port: 8080

jwt:
  secretKey: ${JWT_SECRET}
  refreshKey: ${JWT_REFRESH}

cloud:
  aws:
    s3:
      bucket: omg-s3-bucket
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS}
      secretKey: ${S3_SECRET}

weather:
  api:
    key: ${WEATHER_API_SECRET}

tour:
  api:
    key: ${TOUR_API_SECRET}

channel:
  api:
    key: ${CHANNEL_API_SECRET}

omgAdmin:
  username: ${OMG_ADMIN_USERNAME}
  password: ${OMG_ADMIN_PASSWORD}
  adminNick: OMGAdmin
  phoneNumber: 01012345678
  name: admin
  gender: none
